h1. PhyloFun

h2. Abstract

Protein function has often been transferred from characterized proteins to novel proteins based on sequence similarity, e.g. using the best BLAST hit. Based on the SIFTER phylogenomic tool (1), we use a statistical inference algorithm to propagate e.g. Gene Ontology (GO) terms inside a phylogenetic tree, scoring branch length, evidence codes of GO annotations and speciation vs. duplication nodes. Including additional information like Interpro domains improves predictions. This allows us to integrate multiple data types in a consistent framework.

In order to generate accurate phylogenetic trees that contain a maximum of functional information at reasonable computational costs, we implemented a reusable workflow that, for a given input protein, searches candidate orthologs with known functions, adds paralogs so that duplications can be detected reliably and builds a phylogenetic tree from a filtered multiple alignment. This tree is then used as input to the inference algorithm which outputs, for each protein in the tree, a probability for assigning each GO term occurring in the tree.

We call this new phylogenomic workflow for protein function prediction *PhyloFun*.

h2. Install PhyloFun

*PhyloFun requires two external tools*

* MAFFT http://mafft.cbrc.jp/alignment/software/
* FastTree[MP] http://www.microbesonline.org/fasttree/

Make sure both programms are installed and in your search path. That means, that from an interactive @R@ shell the following must work:
@system( "mafft" )@
@system( "FastTree" )@ or, if you installed the preferred multi processor version of FastTree:
@system( "FastTreeMP" )@

*Install the PhyloFun R package*

* Download source: @git clone git://github.com/groupschoof/PhyloFun.git ./PhyloFun@
* Install: @R CMD INSTALL PhyloFun@

h2. Run PhyloFun

Please _note_ that PhyloFun requires a working internet connection to run properly!

The PhyloFun R package comes with a number of executable Rscripts, all stored in folder @exec/@.

After installation find the path to the installed PhyloFun package. Open an interactive @R@ shell and type @.path.package("PhyloFun")@.
The returned path can than be used to run the provided Rscript @runPhyloFun.R@ as follows:

@Rscript <path_to_your_PhyloFun_installation>/exec/runPhyloFun.R <arguments>@

The arguments are printed whenever the Rscript is executed.

*A short test run can be done as follows:*

bc. Rscript <path_to_your_PhyloFun_installation>/exec/runPhyloFun.R -q <path_to_your_PhyloFun_installation>/-q <path_to_your_PhyloFun_installation>/inst/protein_1.fasta -b <path_to_your_PhyloFun_installation>/inst/protein_1_blastout.tbl -f FastTree -h true -r true -m true

_Note_ that depending on you installation of FastTree you'll have to provide either @-f FastTree@ or the faster multi processor version of if @-f FastTreeMP@.

Results of this test run will be written into the folder @Protein_1/@ in your current directory.

h3. Set number of parallel threads used by FastTreeMP (OpenMP)

Export the environment variable @OMP_NUM_THREADS@ and set it to your choice, for example:

bc. export OMP_NUM_THREADS=10; Rscript <path_to_your_PhyloFun_installation>/exec/runPhyloFun.R [...]

h2. Coding style guide

PhyloFun's code mostly follows the google style guide for R:
http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html
